(define (divides? a b)
  (= (remainder b a) 0))

(define (find-divisor n test-divisor)
  (cond ((> (sqr test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (report-prime n elapsed-time)
  (newline)
  (display n)
  (display " *** ")
  (display elapsed-time)
  elapsed-time)

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime n (- (current-inexact-milliseconds) start-time))
      0))

(define (timed-prime-test n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (search-for-primes n count)
  (define (search-for-primes-sub n curcount r prevr)
;   (printf "~nsfps n:~a curcount:~a r:~a prevr:~a~n" n curcount r prevr)
    (cond ((= curcount 0) (/ r count))
          ((not (= r prevr)) (search-for-primes-sub n (- curcount 1) r r))
          ((even? n) (search-for-primes-sub (+ n 1) curcount r r))
          (else (search-for-primes-sub (+ n 2) curcount (+ r (timed-prime-test n)) r))))
  (define (print-result avg)
    (newline)
    (display n)
    (display " average *** ")
    (display avg))
  (print-result (search-for-primes-sub n count 0 0)))

(search-for-primes 1000 3)
(search-for-primes 10000 3)
(search-for-primes 100000 3)
(search-for-primes 1000000 3)
(search-for-primes 10000000000 3)
(search-for-primes 100000000000 3)
(search-for-primes 1000000000000 3) ; the larger n is, the closer the ratio is to sqrt(10)
