(define (make-mobile left right)
  (list left right))
(define (make-branch len structure)
  (list len structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
(define (total-weight mobile)
  (if (not (pair? mobile))
      mobile
      (+ (total-weight (branch-structure (left-branch mobile)))
         (total-weight (branch-structure (right-branch mobile))))))
(define (balanced? mobile)
  (if (not (pair? mobile))
      #t
      (and (balanced? (branch-structure (left-branch mobile)))
           (balanced? (branch-structure (right-branch mobile)))
           (= (* (total-weight (branch-structure (left-branch mobile)))
                 (branch-length (left-branch mobile)))
              (* (total-weight (branch-structure (right-branch mobile)))
                 (branch-length (right-branch mobile)))))))

(define x (make-mobile (make-branch 10 2)
                       (make-branch 5 4)))
(define y (make-mobile (make-branch 100 3)
                       (make-branch 4 75)))
(define z (make-mobile (make-branch 13 x)
                       (make-branch 1 y)))
(total-weight z)
(balanced? z)
